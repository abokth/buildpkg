#!/bin/bash

# Copyright 2019 Kungliga Tekniska högskolan
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# Authors: Alexander Boström, KTH

set -e; set -o pipefail

type >/dev/null mktemp
type >/dev/null buildah
type >/dev/null podman

declare -a tmpcontainers
declare -a tmpfiles
cleanup() {
    buildah rm "${tmpcontainers[@]}" >/dev/null || :
    rm -rf "${tmpfiles[@]}"
}

errx() {
    trap - EXIT
    cleanup
    echo >&2 "$@"
    exit 1
}

onexit() {
    local ec=$? bc="$BASH_COMMAND"
    local -i exitcode=$ec
    trap - EXIT
    cleanup
    if (( $exitcode == 0 )); then exit 0; fi
    echo >&2 "$0: command failed with code $exitcode:" "$bc"
    exit $exitcode
}
trap onexit EXIT

mktmp() {
    local tmpvar="$1"; shift
    local newtmpfile=$(mktemp --suffix=".$tmpvar" "$@")
    [[ -n "$newtmpfile" && -e "$newtmpfile" ]]
    tmpfiles+=("$newtmpfile")
    eval "$tmpvar='$newtmpfile'"
}

usage() {
    echo "$0 <container image> <output tar archive> <directory to archive> <directory to create> <installer executable> [<installer argument> ...]"
}

containerimage="$1"; shift
outputfile="$1"; shift
archivedir="$1"; shift
installdir="$1"; shift
installer="$1"; shift

container=$(buildah from "$containerimage")
tmpcontainers+=("$container")

buildah unshare -- /bin/bash <<EOF
set -e; set -o pipefail

mnt=\$(buildah mount "$container")

mkdir "\$mnt/.buildpkg"
cp "$installer" "\$mnt/.buildpkg/"

buildah unmount "$container"
EOF

buildah run "$container" mkdir -p "$installdir"
buildah run "$container" chmod 700 /.buildpkg/"$(basename "$installer")"
buildah run "$container" /.buildpkg/"$(basename "$installer")" "$@"

buildah unshare -- /bin/bash <<EOF
set -e; set -o pipefail

mnt=\$(buildah mount "$container")

tar -cf "$outputfile" -C "\$mnt""$archivedir" .

buildah unmount "$container"
EOF

